{"mappings":"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","sources":["src/config/config.json","src/core/getConfig.ts","src/core/handleCustomOption.ts","src/core/handleExtensionOption.ts","src/core/handleIgnoreOption.ts","src/utils/message.ts","src/utils/displayError.ts","src/core/handleOnlyOption.ts","src/utils/utils.ts","src/utils/getExtensionCategory.ts","src/core/createDirByFileExtension.ts","src/core/moveFile.ts","src/core/organizeFiles.ts","src/options/index.ts","src/index.ts"],"sourcesContent":["{\r\n  \"initialPath\": \"./\",\r\n  \"prefix\": \"\\n[Organize]:\",\r\n  \"fileExtensions\": {\r\n    \"images\": [\r\n      \"jpg\",\r\n      \"jpeg\",\r\n      \"png\",\r\n      \"jp2\",\r\n      \"j2k\",\r\n      \"jpf\",\r\n      \"jpx\",\r\n      \"jpm\",\r\n      \"mj2\",\r\n      \"heif\",\r\n      \"heic\",\r\n      \"arw\",\r\n      \"cr2\",\r\n      \"nrw\",\r\n      \"k25\",\r\n      \"tiff\",\r\n      \"tif\",\r\n      \"bmp\",\r\n      \"dib\",\r\n      \"jpe\",\r\n      \"jif\",\r\n      \"jfif\",\r\n      \"jfi\",\r\n      \"gif\",\r\n      \"webp\"\r\n    ],\r\n    \"icons\": [\"svg\", \"svgz\", \"ico\"],\r\n    \"documents\": [\r\n      \"txt\",\r\n      \"pdf\",\r\n      \"doc\",\r\n      \"docx\",\r\n      \"docm\",\r\n      \"dot\",\r\n      \"dotx\",\r\n      \"pages\",\r\n      \"uof\",\r\n      \"odt\",\r\n      \"xls\",\r\n      \"xlsx\",\r\n      \"xps\",\r\n      \"ods\",\r\n      \"ppt\",\r\n      \"pptx\",\r\n      \"odp\",\r\n      \"epub\",\r\n      \"gslides\",\r\n      \"key\",\r\n      \"keynote\",\r\n      \"pez\",\r\n      \"pot\",\r\n      \"pps\",\r\n      \"ppt\",\r\n      \"pptx\",\r\n      \"prz\",\r\n      \"sdd\",\r\n      \"show\",\r\n      \"sti\",\r\n      \"sxi\"\r\n    ],\r\n    \"music\": [\r\n      \"mp3\",\r\n      \"wav\",\r\n      \"m4a\",\r\n      \"flac\",\r\n      \"wma\",\r\n      \"aac\",\r\n      \"ogg\",\r\n      \"oga\",\r\n      \"mogg\",\r\n      \"opus\",\r\n      \"3gp\"\r\n    ],\r\n    \"videos\": [\"webm\", \"ogv\", \"gifv\", \"rm\", \"amv\", \"mpeg\", \"mp4\", \"mov\"],\r\n    \"movies\": [\"vob\", \"drc\", \"rmvb\", \"mkv\", \"flv\", \"wmv\", \"amv\", \"avi\"],\r\n    \"archives\": [\"zip\", \"rar\", \"7z\", \"bz2\", \"gz\", \"tar\"]\r\n  }\r\n}\r\n","import config from \"../config/config.json\";\r\nimport { FileExtensions } from \"../types/fileExtensions\";\r\n\r\nexport interface Config {\r\n  fileGroups: Array<keyof FileExtensions>;\r\n  fileExtensions: Required<FileExtensions>;\r\n  initialPath: string;\r\n}\r\n\r\nexport const getConfig = (): Config => {\r\n  const { initialPath } = config;\r\n  const { fileExtensions } = config;\r\n  const fileGroups = Object.keys(fileExtensions) as Array<keyof FileExtensions>;\r\n\r\n  return {\r\n    initialPath,\r\n    fileExtensions,\r\n    fileGroups,\r\n  };\r\n};\r\n","import { FileExtensions } from \"../types/fileExtensions\";\r\nimport { Option } from \"../types/options\";\r\n\r\ntype CustomCategory = {\r\n  fileExtensions: FileExtensions;\r\n  fileGroups: string[];\r\n};\r\n\r\nexport const handleCustomOption = (\r\n  option: Option\r\n): CustomCategory | undefined => {\r\n  if (!option) {\r\n    return undefined;\r\n  }\r\n  const params = option.replace(/\\s/g, \"\").split(\",\");\r\n  if (params.length === 2) {\r\n    const groupName = params[0];\r\n    const fileExtension = params[1];\r\n\r\n    return {\r\n      fileExtensions: {\r\n        [groupName]: fileExtension,\r\n      },\r\n      fileGroups: [groupName],\r\n    };\r\n  }\r\n\r\n  return undefined;\r\n};\r\n","import { FileExtensions } from \"../types/fileExtensions\";\r\nimport { Option } from \"../types/options\";\r\nimport { getConfig } from \"./getConfig\";\r\n\r\nexport const handleExtensionOption = (\r\n  option: Option\r\n): FileExtensions | undefined => {\r\n  if (!option) {\r\n    return;\r\n  }\r\n  const { fileGroups, fileExtensions } = getConfig();\r\n\r\n  const fileExtension = option.toLowerCase();\r\n  const extensionKey = fileGroups.find((fileGroup) =>\r\n    fileExtensions[fileGroup].includes(fileExtension)\r\n  );\r\n\r\n  if (extensionKey) {\r\n    return {\r\n      [extensionKey]: [fileExtension],\r\n    };\r\n  }\r\n\r\n  return;\r\n};\r\n","import { FileExtensions } from \"../types/fileExtensions\";\r\nimport { Option } from \"../types/options\";\r\nimport { getConfig } from \"./getConfig\";\r\n\r\nexport const handleIgnoreOption = (\r\n  option: Option\r\n): FileExtensions | undefined => {\r\n  if (!option) {\r\n    return;\r\n  }\r\n\r\n  const { fileGroups, fileExtensions } = getConfig();\r\n\r\n  const itemsToIgnore = option.includes(\" \")\r\n    ? option.split(\" \").map((item: string) => item.toLowerCase())\r\n    : [option];\r\n\r\n  const updatedFileExtensions = Object.fromEntries(\r\n    fileGroups\r\n      .filter((fileGroup) => !itemsToIgnore.includes(fileGroup))\r\n      .map((fileGroup) => [fileGroup, fileExtensions[fileGroup]])\r\n  );\r\n\r\n  return updatedFileExtensions;\r\n};\r\n","import { green, red, yellowBright } from \"chalk\";\r\nimport config from \"../config/config.json\";\r\n\r\nconst { prefix } = config;\r\n\r\nexport enum MessageType {\r\n  Info = \"info\",\r\n  Success = \"success\",\r\n  Warning = \"warning\",\r\n  Casual = \"casual\",\r\n}\r\n\r\nexport const createErrorMessage = (\r\n  message: string,\r\n  err?: NodeJS.ErrnoException | null | unknown\r\n): void => console.log(red.bgBlack.bold(`${message} ${err && `: ${err}`}`));\r\n\r\nexport const displayMesssage = (message: string, type: MessageType): void => {\r\n  switch (type) {\r\n    case MessageType.Success: {\r\n      return console.log(`${prefix} ${green.bold(message)}`);\r\n    }\r\n    case MessageType.Info: {\r\n      return console.log(`${prefix} ${yellowBright.bold(message)}`);\r\n    }\r\n    case MessageType.Warning: {\r\n      return console.log(`${prefix} ${red(message)}`);\r\n    }\r\n    case MessageType.Casual:\r\n    default: {\r\n      return console.log(message);\r\n    }\r\n  }\r\n};\r\n","import { createErrorMessage } from \"./message\";\r\n\r\nexport enum ErrorType {\r\n  OnMove = \"onMove\",\r\n  ReadDir = \"readDir\",\r\n  Parameter = \"parameter\",\r\n}\r\n\r\nexport const displayError = (\r\n  type: ErrorType,\r\n  err?: NodeJS.ErrnoException | null | unknown\r\n): void => {\r\n  switch (type) {\r\n    case ErrorType.OnMove: {\r\n      return createErrorMessage(\"Error while moving file\", err);\r\n    }\r\n    case ErrorType.ReadDir: {\r\n      return createErrorMessage(\"Unable to scan directory\", err);\r\n    }\r\n    case ErrorType.Parameter: {\r\n      return createErrorMessage(\r\n        \"Error, check if you entered parameter value correctly\",\r\n        err\r\n      );\r\n    }\r\n    default: {\r\n      return createErrorMessage(\"Unexpected error\", err);\r\n    }\r\n  }\r\n};\r\n","import { FileExtensions } from \"../types/fileExtensions\";\r\nimport { Option } from \"../types/options\";\r\nimport { displayError, ErrorType } from \"../utils/displayError\";\r\nimport { getConfig } from \"./getConfig\";\r\n\r\nexport const handleOnlyOption = (\r\n  option: Option\r\n): FileExtensions | undefined => {\r\n  const { fileExtensions } = getConfig();\r\n\r\n  if (!option) {\r\n    return;\r\n  }\r\n\r\n  const fileGroup = option.toLowerCase();\r\n\r\n  if (fileGroup in fileExtensions) {\r\n    const updatedFileExtensions: FileExtensions = {\r\n      [fileGroup]: fileExtensions[fileGroup as keyof FileExtensions],\r\n    };\r\n\r\n    return updatedFileExtensions;\r\n  }\r\n\r\n  displayError(ErrorType.Parameter);\r\n  return;\r\n};\r\n","import { extname } from \"path\";\r\n\r\nexport const capitalize = (str: string): string =>\r\n  str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\r\n\r\nexport const getFileExtension = (fileName: string): string => {\r\n  const fileExtension = extname(fileName);\r\n  return fileExtension.slice(1, fileExtension.length).toLowerCase();\r\n};\r\n","import { FileExtensions } from \"../types/fileExtensions\";\r\nimport { capitalize } from \"./utils\";\r\n\r\nexport const getExtensionCategory = (\r\n  fileGroups: string[],\r\n  fileExtensions: FileExtensions,\r\n  fileExtension: string\r\n): string | undefined => {\r\n  const category = fileGroups.find((category) =>\r\n    fileExtensions[category as keyof FileExtensions]?.includes(fileExtension)\r\n  );\r\n\r\n  if (category) {\r\n    return capitalize(category);\r\n  }\r\n};\r\n","import { existsSync, mkdir } from \"fs\";\r\nimport { displayError, ErrorType } from \"../utils/displayError\";\r\nimport { getConfig } from \"./getConfig\";\r\n\r\nexport const createDirByFileExtension = (category: string): void => {\r\n  const { initialPath } = getConfig();\r\n  const categoryPath = `${initialPath}/${category}`;\r\n\r\n  if (!existsSync(categoryPath)) {\r\n    return mkdir(categoryPath, (err) => displayError(ErrorType.ReadDir, err));\r\n  }\r\n};\r\n","import { existsSync } from \"fs\";\r\nimport { moveSync } from \"fs-extra\";\r\nimport { displayError, ErrorType } from \"../utils/displayError\";\r\nimport { displayMesssage, MessageType } from \"../utils/message\";\r\nimport { createDirByFileExtension } from \"./createDirByFileExtension\";\r\nimport { getConfig } from \"./getConfig\";\r\n\r\nexport const moveFile = (\r\n  file: string,\r\n  category: string | undefined,\r\n  onMoveCallback: () => void\r\n): void => {\r\n  if (!category) return undefined;\r\n\r\n  const { initialPath } = getConfig();\r\n\r\n  const targetFilePath = `${initialPath}/${category}/${file}`;\r\n  const filePath = `${initialPath}/${file}`;\r\n\r\n  createDirByFileExtension(category);\r\n\r\n  if (!existsSync(targetFilePath)) {\r\n    try {\r\n      moveSync(filePath, targetFilePath);\r\n    } catch (err: unknown) {\r\n      displayError(ErrorType.OnMove, err);\r\n    }\r\n    onMoveCallback();\r\n    return displayMesssage(\r\n      `Moving ${file} into ${category}/${file}`,\r\n      MessageType.Casual\r\n    );\r\n  }\r\n\r\n  if (existsSync(targetFilePath)) {\r\n    return displayMesssage(\r\n      `${file} already exist in ${category} directory, skipping...`,\r\n      MessageType.Warning\r\n    );\r\n  }\r\n};\r\n","import { readdir } from \"fs\";\r\nimport { FileExtensions } from \"../types/fileExtensions\";\r\nimport { displayError, ErrorType } from \"../utils/displayError\";\r\nimport { getExtensionCategory } from \"../utils/getExtensionCategory\";\r\nimport { displayMesssage, MessageType } from \"../utils/message\";\r\nimport { getFileExtension } from \"../utils/utils\";\r\nimport { getConfig } from \"./getConfig\";\r\nimport { moveFile } from \"./moveFile\";\r\n\r\nexport const organizeFiles = (\r\n  fileGroups: string[],\r\n  fileExtensions: FileExtensions\r\n): void => {\r\n  const { initialPath } = getConfig();\r\n  let movedFiles = 0;\r\n\r\n  readdir(initialPath, (err, files) => {\r\n    if (err) {\r\n      return displayError(ErrorType.ReadDir, err);\r\n    }\r\n    files.forEach((file, index) => {\r\n      const fileExtension = getFileExtension(file);\r\n      if (!fileExtension) {\r\n        return;\r\n      }\r\n      const category = getExtensionCategory(\r\n        fileGroups,\r\n        fileExtensions,\r\n        fileExtension\r\n      );\r\n\r\n      moveFile(file, category, () => {\r\n        movedFiles += 1;\r\n      });\r\n\r\n      if (movedFiles === 0 && index === files.length - 1) {\r\n        displayMesssage(`No files found to be organized\\n`, MessageType.Info);\r\n\r\n        return process.exit();\r\n      }\r\n      if (index === files.length - 1) {\r\n        displayMesssage(`Organized ${movedFiles} files\\n`, MessageType.Success);\r\n\r\n        return process.exit();\r\n      }\r\n    });\r\n  });\r\n};\r\n","import { join } from \"path\";\r\nimport { Command } from \"commander\";\r\nimport { green, magentaBright } from \"chalk\";\r\nimport { fileExtensions } from \"../config/config.json\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst pkg = require(`${join(__dirname, \"../../package.json\")}`);\r\n\r\nexport const program = new Command();\r\n\r\nprogram.version(pkg.version).description(\r\n  `${green(\"Organize\")} your files \\n${magentaBright(\r\n    \"[Categories]\"\r\n  )}: ${Object.keys(fileExtensions).join(\", \")}\r\n      `\r\n);\r\nprogram.option(\r\n  \"-i, --ignore [category or categories]\",\r\n  `Ignore files from one or many categories, e.g ${magentaBright.italic(\r\n    \"organize -i 'videos'\"\r\n  )} or ${magentaBright.italic(\"organize -i 'videos, movies, music'\")}`\r\n);\r\nprogram.option(\r\n  \"-o, --only [files group]\",\r\n  `Organize by only one category, e.g ${magentaBright.italic(\r\n    \"organize -o 'videos'\"\r\n  )}`\r\n);\r\nprogram.option(\r\n  \"-e, --extension [file extension]\",\r\n  `Organize files with specified extension, e.g ${magentaBright.italic(\r\n    \"organize -e 'webm'\"\r\n  )}`\r\n);\r\nprogram.option(\r\n  \"-c, --custom [new category, file extension]\",\r\n  `Organize files with extension which categories don't contain, e.g ${magentaBright.italic(\r\n    \"organize -e 'Javascript, js'\"\r\n  )}`\r\n);\r\n\r\nprogram.parse(process.argv);\r\n","#!/usr/bin/env node\r\n\r\nimport { getConfig } from \"./core/getConfig\";\r\nimport { handleCustomOption } from \"./core/handleCustomOption\";\r\nimport { handleExtensionOption } from \"./core/handleExtensionOption\";\r\nimport { handleIgnoreOption } from \"./core/handleIgnoreOption\";\r\nimport { handleOnlyOption } from \"./core/handleOnlyOption\";\r\nimport { organizeFiles } from \"./core/organizeFiles\";\r\nimport { program } from \"./options\";\r\n\r\nconst { fileGroups: defaultFileGroups, fileExtensions: defaultFileExtensions } =\r\n  getConfig();\r\nconst options = program.opts();\r\n\r\nif (options.ignore) {\r\n  const fileExtensions = handleIgnoreOption(options.ignore);\r\n  if (fileExtensions) {\r\n    organizeFiles(defaultFileGroups, fileExtensions);\r\n  }\r\n}\r\n\r\nif (options.only) {\r\n  const fileExtensions = handleOnlyOption(options.only);\r\n  if (fileExtensions) {\r\n    organizeFiles(defaultFileGroups, fileExtensions);\r\n  }\r\n}\r\n\r\nif (options.extension) {\r\n  const fileExtensions = handleExtensionOption(options.extension);\r\n  if (fileExtensions) {\r\n    organizeFiles(defaultFileGroups, fileExtensions);\r\n  }\r\n}\r\n\r\nif (options.custom) {\r\n  const customOption = handleCustomOption(options.custom);\r\n  if (customOption) {\r\n    const { fileGroups, fileExtensions } = customOption;\r\n\r\n    organizeFiles(fileGroups, fileExtensions);\r\n  }\r\n}\r\n\r\norganizeFiles(defaultFileGroups, defaultFileExtensions);\r\n"],"names":["$1375a7f5947b8e58$exports","JSON","parse","$a81f9c1d3b0d95a3$export$44487a86467333c3","initialPath","$parcel$interopDefault","fileExtensions","Object","keys","$788b16619b23135e$export$230576872fa66f92","option","params","replace","split","length","groupName","fileGroups","$4ec4cf759f76e0d1$export$f549c578a1d5593b","fileExtension","toLowerCase","extensionKey","find","fileGroup","includes","$8f86d5ed1c536c82$export$3b8235fdf4dbb54d","itemsToIgnore","map","item","fromEntries","filter","prefix","$a1e4f0b80e934994$var$prefix","$a1e4f0b80e934994$export$80edbf15fa61a4db","MessageType","$a1e4f0b80e934994$export$a2b2d8b55704c18e","message","err","console","log","$jh9ce$chalk","red","bgBlack","bold","$a1e4f0b80e934994$export$9796230e42065fcf","type","Success","green","Info","yellowBright","Warning","Casual","$514c0f6c896d8685$export$dba1278861bf0dc1","ErrorType","$514c0f6c896d8685$export$7e605cc38c3f1d09","OnMove","ReadDir","Parameter","$7a4c111da0c00533$export$328428f39109fde9","$c0a3b2956d069469$export$5f7821c344028c56","fileName","$jh9ce$path","extname","slice","$74be085ad24e5c08$export$9b6f40dd34c77f85","category","str","toUpperCase","$cb7b1e2566ba9e16$export$9f796a511906a495","categoryPath","$jh9ce$fs","existsSync","mkdir","$39603d0914e622ab$export$d6b8065930678be9","file","onMoveCallback","targetFilePath","filePath","$jh9ce$fsextra","moveSync","$35f571e9df2f771a$export$30785e303f85eb64","movedFiles","readdir","files","forEach","index","process","exit","$21492e9473685715$var$pkg","require","join","$21492e9473685715$var$$parcel$__dirname","$21492e9473685715$export$ee72801824c03e63","$jh9ce$commander","Command","version","description","magentaBright","italic","argv","$75a982ec3eeb4fe8$var$defaultFileGroups","$75a982ec3eeb4fe8$var$defaultFileExtensions","$75a982ec3eeb4fe8$var$options","opts","ignore","only","extension","custom","customOption"],"version":3,"file":"index.js.map","sourceRoot":"../"}