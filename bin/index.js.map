{"mappings":";6JAAAA,EAAiBC,KAAKC,MAAM,0tBCG5B,MAAMC,OAAEC,GAAWC,EAAAL,G,IAEZM,E,IAAKC,KAAAD,MAAA,KACV,KAAO,OADGC,EAEV,QAAU,UAFAA,EAGV,QAAU,UAHAA,EAIV,OAAS,SAGJ,MAAMC,EAAqB,CAChCC,EACAC,IACSC,QAAQC,IAAIC,EAAAC,IAAIC,QAAQC,KAAK,GAAGP,KAAWC,GAAO,KAAKA,QAErDO,EAAiB,CAACR,EAAiBS,KAC9C,OAAQA,GACN,KAAKZ,EAAYa,QACf,OAAOR,QAAQC,IAAI,GAAGR,KAAUS,EAAAO,MAAMJ,KAAKP,MAE7C,KAAKH,EAAYe,KACf,OAAOV,QAAQC,IAAI,GAAGR,KAAUS,EAAAS,aAAaN,KAAKP,MAEpD,KAAKH,EAAYiB,QACf,OAAOZ,QAAQC,IAAI,GAAGR,MAAU,EAAAS,EAAAC,KAAIL,MAEtC,KAAKH,EAAYkB,OACjB,QACE,OAAOb,QAAQC,IAAI,GAAGR,MAAU,EAAAS,EAAAY,MAAKhB,MAEzC,E,IC9BKiB,E,IAAKC,KAAAD,MAAA,KACV,OAAS,SADCC,EAEV,QAAU,UAFAA,EAGV,UAAY,YAGP,MAAMC,EAAe,CAC1BV,EACAR,KAEA,OAAQQ,GACN,KAAKQ,EAAUG,OACb,OAAOrB,EAAmB,0BAA2BE,GAEvD,KAAKgB,EAAUI,QACb,OAAOtB,EAAmB,2BAA4BE,GAExD,KAAKgB,EAAUK,UACb,OAAOvB,EACL,uDACAE,GAGJ,QACE,OAAOF,EAAmB,mBAAoBE,GAElD,E,4CCtBF,MAAMsB,EAAMC,QAAQ,IAAG,EAAAC,EAAAC,MAAKC,EAAW,yBAE1BC,EAAU,IAAI,EAAAC,EAAAC,SAE3BF,EAAQG,QAAQR,EAAIQ,SAASC,YAC3B,IAAG,EAAA5B,EAAAO,OAAM,6BAA4B,EAAAP,EAAA6B,eACnC,oBACIC,OAAOC,KAAK5C,EAAA6C,gBAAgBV,KAAK,iBAGzCE,EAAQS,OACN,wCACA,iDAAiDjC,EAAA6B,cAAcK,OAC7D,8BACMlC,EAAA6B,cAAcK,OAAO,0CAE/BV,EAAQS,OACN,2BACA,sCAAsCjC,EAAA6B,cAAcK,OAClD,2BAGJV,EAAQS,OACN,mCACA,gDAAgDjC,EAAA6B,cAAcK,OAC5D,yBAGJV,EAAQS,OACN,8CACA,qEAAqEjC,EAAA6B,cAAcK,OACjF,mCAIJV,EAAQnC,MAAM8C,QAAQC,MCvCf,MAAMC,EAAcC,GACzBA,EAAIC,MAAM,EAAG,GAAGC,cAAgBF,EAAIC,MAAM,GAAGE,cAElCC,EAAoBC,IAC/B,MAAMC,GAAgB,EAAAvB,EAAAwB,SAAQF,GAC9B,OAAOC,EAAcL,MAAM,EAAGK,EAAcE,QAAQL,aAAW,GCI3DM,YAAEC,GAAgBxD,EAAAL,GACxB,IAAI6C,eAAEiB,GAAmCzD,EAAAL,GACzC,MAAM+D,EAAU1B,EAAQ2B,OAClBC,EAAatB,OAAOC,KAAKkB,GAE/B,GAAIC,EAAQG,OACV,GAAIH,EAAQG,OAAOC,SAAS,KAAM,CAChC,MAAMC,EAAgBL,EAAQG,OAC3BG,MAAM,KACNC,KAAKC,GAAiBrB,EAAWqB,KACpCN,EAAWO,SAASC,IACdL,EAAcD,SAASM,WAAaX,EAAeW,EAAI,GAE/D,MAAO,GAAKV,EAAQG,OAAOC,SAAS,KAMlCvC,EAAaF,EAAUK,eANiB,CACxC,MAAM2C,EAAYxB,EAAWa,EAAQG,QACjCD,EAAWE,SAASO,WACfZ,EAAeY,EAE1B,CAKF,GAAIX,EAAQY,KAAM,CAChB,MAAMD,EAAYxB,EAAWa,EAAQY,MACjCD,KAAaZ,EACfA,EAAiB,CACfY,CAACA,GAAYZ,EAAeY,IAG9B9C,EAAaF,EAAUK,UAE3B,CAEA,GAAIgC,EAAQa,UAAW,CACrB,MAAMnB,EAAgBM,EAAQa,UAAUtB,cACxC,IAAIuB,EACJZ,EAAWO,SAASC,IACdhB,EAAcgB,GAAKN,SAASV,KAC9BoB,EAAeJ,EAAA,IAIfI,EACFf,EAAiB,CACfe,CAACA,GAAe,CAACpB,IAGnB7B,EAAaF,EAAUK,UAE3B,CAEA,GAAIgC,EAAQe,OAAQ,CAClB,MAAMC,EAAShB,EAAQe,OAAOE,QAAQ,MAAO,IAAIX,MAAM,KACvD,GAAsB,IAAlBU,EAAOpB,OAAc,CACvB,MAAMsB,EAAYF,EAAO,GACnBtB,EAAgBsB,EAAO,GAC7BjB,EAAiB,CACfmB,CAACA,GAAYxB,EAEjB,MACE7B,EAAaF,EAAUK,UAE3B,CAEA,MAYMmD,EAAW,CACfC,EACA1B,EACA2B,KAEA,MAAMC,EAjBqB,CAAC5B,GAC5BQ,EAAWqB,MAAMD,GACfvB,EAAeuB,GAAUlB,SAASV,KAenB8B,CAAqB9B,GACtC,GAAK4B,EAAL,CAIA,GAjB+B,CAACA,IAChC,GAAKA,GACA,EAAAG,EAAAC,YAAW,GAAG5B,KAAewB,OACzB,EAAAG,EAAAE,OAAM,GAAG7B,KAAewB,KAAa3E,GAAQA,GAAA,EAYtDiF,CAAyBN,KAEpB,EAAAG,EAAAC,YAAW,GAAG5B,KAAewB,KAAYF,KAAS,CACrD,KACE,EAAAS,EAAAC,UAAS,GAAGhC,KAAesB,IAAQ,GAAGtB,KAAewB,KAAYF,IAGnE,CAFE,MAAOzE,GACPkB,EAAaF,EAAUG,OAAQnB,EACjC,CAEA,OADA0E,IACOnE,EACL,UAAUkE,UAAaE,KAAYF,IACnC7E,EAAYkB,OAEhB,CACA,OAAI,EAAAgE,EAAAC,YAAW,GAAG5B,KAAewB,KAAYF,KACpClE,EACL,GAAGkE,sBAAyBE,2BAC5B/E,EAAYiB,cAHhB,CAhBsB,CAmBC,EAKH,MACpB,IAAIuE,EAAa,GACjB,EAAAN,EAAAO,SAAQlC,GAAa,CAACnD,EAAKsF,KACzB,GAAItF,EACF,OAAOkB,EAAaF,EAAUI,QAASpB,GAEzCsF,EAAMxB,SAAQ,CAACW,EAAMc,KACnBf,EAASC,EAAM5B,EAAiB4B,IAAO,KACrCW,GAAc,KAEXA,GAAcG,IAAUD,EAAMrC,OAAS,EAMxCsC,IAAUD,EAAMrC,OAAS,EACpB1C,EACL,aAAa6E,YACbxF,EAAYa,cAHhB,EALSF,EACL,mCACAX,EAAYe,QASlB,GACF,EAGF6E","sources":["src/config/config.json","src/components/message.ts","src/components/displayError.ts","src/options/index.ts","src/functions/index.ts","src/index.ts"],"sourcesContent":["{\n  \"initialPath\": \"./\",\n  \"prefix\": \"\\n[Organize]:\",\n  \"fileExtensions\": {\n    \"Images\": [\n      \"jpg\",\n      \"jpeg\",\n      \"png\",\n      \"jp2\",\n      \"j2k\",\n      \"jpf\",\n      \"jpx\",\n      \"jpm\",\n      \"mj2\",\n      \"heif\",\n      \"heic\",\n      \"arw\",\n      \"cr2\",\n      \"nrw\",\n      \"k25\",\n      \"tiff\",\n      \"tif\",\n      \"bmp\",\n      \"dib\",\n      \"jpe\",\n      \"jif\",\n      \"jfif\",\n      \"jfi\",\n      \"gif\",\n      \"webp\"\n    ],\n    \"Icons\": [\"svg\", \"svgz\", \"ico\"],\n    \"Documents\": [\n      \"txt\",\n      \"pdf\",\n      \"doc\",\n      \"docx\",\n      \"docm\",\n      \"dot\",\n      \"dotx\",\n      \"pages\",\n      \"uof\",\n      \"odt\",\n      \"xls\",\n      \"xlsx\",\n      \"xps\",\n      \"ods\",\n      \"ppt\",\n      \"pptx\",\n      \"odp\",\n      \"epub\",\n      \"gslides\",\n      \"key\",\n      \"keynote\",\n      \"pez\",\n      \"pot\",\n      \"pps\",\n      \"ppt\",\n      \"pptx\",\n      \"prz\",\n      \"sdd\",\n      \"show\",\n      \"sti\",\n      \"sxi\"\n    ],\n    \"Music\": [\n      \"mp3\",\n      \"wav\",\n      \"m4a\",\n      \"flac\",\n      \"wma\",\n      \"aac\",\n      \"ogg\",\n      \"oga\",\n      \"mogg\",\n      \"opus\",\n      \"3gp\"\n    ],\n    \"Videos\": [\"webm\", \"ogv\", \"gifv\", \"rm\", \"amv\", \"mpeg\", \"mp4\", \"mov\"],\n    \"Movies\": [\"vob\", \"drc\", \"rmvb\", \"mkv\", \"flv\", \"wmv\", \"amv\", \"avi\"],\n    \"Archives\": [\"zip\", \"rar\", \"7z\", \"bz2\", \"gz\", \"tar\"]\n  }\n}\n","import { red, green, yellowBright, grey } from \"chalk\";\nimport config from \"../config/config.json\";\n\nconst { prefix } = config;\n\nexport enum MessageType {\n  Info = \"info\",\n  Success = \"success\",\n  Warning = \"warning\",\n  Casual = \"casual\",\n}\n\nexport const createErrorMessage = (\n  message: string,\n  err?: NodeJS.ErrnoException | null | unknown\n): void => console.log(red.bgBlack.bold(`${message} ${err && `: ${err}`}`));\n\nexport const createMesssage = (message: string, type: MessageType): void => {\n  switch (type) {\n    case MessageType.Success: {\n      return console.log(`${prefix} ${green.bold(message)}`);\n    }\n    case MessageType.Info: {\n      return console.log(`${prefix} ${yellowBright.bold(message)}`);\n    }\n    case MessageType.Warning: {\n      return console.log(`${prefix} ${red(message)}`);\n    }\n    case MessageType.Casual:\n    default: {\n      return console.log(`${prefix} ${grey(message)}`);\n    }\n  }\n};\n","import { createErrorMessage } from \"./message\";\n\nexport enum ErrorType {\n  OnMove = \"onMove\",\n  ReadDir = \"readDir\",\n  Parameter = \"parameter\",\n}\n\nexport const displayError = (\n  type: ErrorType,\n  err?: NodeJS.ErrnoException | null | unknown\n): void => {\n  switch (type) {\n    case ErrorType.OnMove: {\n      return createErrorMessage(\"Error while moving file\", err);\n    }\n    case ErrorType.ReadDir: {\n      return createErrorMessage(\"Unable to scan directory\", err);\n    }\n    case ErrorType.Parameter: {\n      return createErrorMessage(\n        \"Error, check if you entered parametr value correctly\",\n        err\n      );\n    }\n    default: {\n      return createErrorMessage(\"Unexpected error\", err);\n    }\n  }\n};\n","import { join } from \"path\";\nimport { Command } from \"commander\";\nimport { green, magentaBright } from \"chalk\";\nimport { fileExtensions } from \"../config/config.json\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require(`${join(__dirname, \"../../package.json\")}`);\n\nexport const program = new Command();\n\nprogram.version(pkg.version).description(\n  `${green(\"Organize\")} your files \\n${magentaBright(\n    \"[Categories]\"\n  )}: ${Object.keys(fileExtensions).join(\", \")}\n      `\n);\nprogram.option(\n  \"-i, --ignore [category or categories]\",\n  `Ignore files from one or many categories, e.g ${magentaBright.italic(\n    \"organize -i 'videos'\"\n  )} or ${magentaBright.italic(\"organize -i 'videos, movies, music'\")}`\n);\nprogram.option(\n  \"-o, --only [files group]\",\n  `Organize by only one category, e.g ${magentaBright.italic(\n    \"organize -o 'videos'\"\n  )}`\n);\nprogram.option(\n  \"-e, --extension [file extension]\",\n  `Organize files with specified extension, e.g ${magentaBright.italic(\n    \"organize -e 'webm'\"\n  )}`\n);\nprogram.option(\n  \"-c, --custom [new category, file extension]\",\n  `Organize files with extension which categories don't contain, e.g ${magentaBright.italic(\n    \"organize -e 'Javascript, js'\"\n  )}`\n);\n\nprogram.parse(process.argv);\n","import { extname } from \"path\";\n\nexport const capitalize = (str: string): string =>\n  str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n\nexport const getFileExtension = (fileName: string): string => {\n  const fileExtension = extname(fileName);\n  return fileExtension.slice(1, fileExtension.length).toLowerCase();\n};\n","#!/usr/bin/env node\n\nimport { existsSync, mkdir, readdir } from \"fs\";\nimport { moveSync } from \"fs-extra\";\nimport { displayError, ErrorType } from \"./components/displayError\";\nimport { createMesssage, MessageType } from \"./components/message\";\nimport { program } from \"./options\";\nimport config from \"./config/config.json\";\nimport { capitalize, getFileExtension } from \"./functions\";\nimport { FileExtensions } from \"./types/fileExtensions\";\n\nconst { initialPath } = config;\nlet { fileExtensions }: FileExtensions = config;\nconst options = program.opts();\nconst filesGroup = Object.keys(fileExtensions);\n\nif (options.ignore) {\n  if (options.ignore.includes(\" \")) {\n    const itemsToIgnore = options.ignore\n      .split(\" \")\n      .map((item: string) => capitalize(item));\n    filesGroup.forEach((key) => {\n      if (itemsToIgnore.includes(key)) delete fileExtensions[key];\n    });\n  } else if (!options.ignore.includes(\" \")) {\n    const fileGroup = capitalize(options.ignore);\n    if (filesGroup.includes(fileGroup)) {\n      delete fileExtensions[fileGroup];\n    }\n  } else {\n    displayError(ErrorType.Parameter);\n  }\n}\n\nif (options.only) {\n  const fileGroup = capitalize(options.only);\n  if (fileGroup in fileExtensions) {\n    fileExtensions = {\n      [fileGroup]: fileExtensions[fileGroup],\n    };\n  } else {\n    displayError(ErrorType.Parameter);\n  }\n}\n\nif (options.extension) {\n  const fileExtension = options.extension.toLowerCase();\n  let extensionKey: string | undefined;\n  filesGroup.forEach((key) => {\n    if (fileExtension[key].includes(fileExtension)) {\n      extensionKey = key;\n    }\n  });\n\n  if (extensionKey) {\n    fileExtensions = {\n      [extensionKey]: [fileExtension],\n    };\n  } else {\n    displayError(ErrorType.Parameter);\n  }\n}\n\nif (options.custom) {\n  const params = options.custom.replace(/\\s/g, \"\").split(\",\");\n  if (params.length === 2) {\n    const groupName = params[0];\n    const fileExtension = params[1];\n    fileExtensions = {\n      [groupName]: fileExtension,\n    };\n  } else {\n    displayError(ErrorType.Parameter);\n  }\n}\n\nconst getExtensionCategory = (fileExtension: string): string | undefined =>\n  filesGroup.find((category) =>\n    fileExtensions[category].includes(fileExtension)\n  );\n\nconst createDirByFileExtension = (category: string): void => {\n  if (!category) return undefined;\n  if (!existsSync(`${initialPath}/${category}`)) {\n    return mkdir(`${initialPath}/${category}`, (err) => err);\n  }\n};\n\nconst moveFile = (\n  file: string,\n  fileExtension: string,\n  onMoveCallback: () => void\n): void => {\n  const category = getExtensionCategory(fileExtension);\n  if (!category) return undefined;\n\n  createDirByFileExtension(category);\n\n  if (!existsSync(`${initialPath}/${category}/${file}`)) {\n    try {\n      moveSync(`${initialPath}/${file}`, `${initialPath}/${category}/${file}`);\n    } catch (err: unknown) {\n      displayError(ErrorType.OnMove, err);\n    }\n    onMoveCallback();\n    return createMesssage(\n      `Moving ${file} into ${category}/${file}`,\n      MessageType.Casual\n    );\n  }\n  if (existsSync(`${initialPath}/${category}/${file}`)) {\n    return createMesssage(\n      `${file} already exist in ${category} directory, skipping...`,\n      MessageType.Warning\n    );\n  }\n};\n\nconst organizeFiles = (): void => {\n  let movedFiles = 0;\n  readdir(initialPath, (err, files) => {\n    if (err) {\n      return displayError(ErrorType.ReadDir, err);\n    }\n    files.forEach((file, index) => {\n      moveFile(file, getFileExtension(file), () => {\n        movedFiles += 1;\n      });\n      if (!movedFiles && index === files.length - 1) {\n        return createMesssage(\n          `No files found to be organized\\n`,\n          MessageType.Info\n        );\n      }\n      if (index === files.length - 1) {\n        return createMesssage(\n          `Organized ${movedFiles} files\\n`,\n          MessageType.Success\n        );\n      }\n    });\n  });\n};\n\norganizeFiles();\n"],"names":["$1375a7f5947b8e58$exports","JSON","parse","prefix","$3d2cd3febd727c71$var$prefix","$parcel$interopDefault","$3d2cd3febd727c71$export$80edbf15fa61a4db","MessageType","$3d2cd3febd727c71$export$a2b2d8b55704c18e","message","err","console","log","$jh9ce$chalk","red","bgBlack","bold","$3d2cd3febd727c71$export$3b3eab047fd8f41","type","Success","green","Info","yellowBright","Warning","Casual","grey","$7d6957d33cceb943$export$dba1278861bf0dc1","ErrorType","$7d6957d33cceb943$export$7e605cc38c3f1d09","OnMove","ReadDir","Parameter","$21492e9473685715$var$pkg","require","$jh9ce$path","join","$21492e9473685715$var$$parcel$__dirname","$21492e9473685715$export$ee72801824c03e63","$jh9ce$commander","Command","version","description","magentaBright","Object","keys","fileExtensions","option","italic","process","argv","$1c07e6dccd4c9b8c$export$9a00dee1beb8f576","str","slice","toUpperCase","toLowerCase","$1c07e6dccd4c9b8c$export$5f7821c344028c56","fileName","fileExtension","extname","length","initialPath","$75a982ec3eeb4fe8$var$initialPath","$75a982ec3eeb4fe8$var$fileExtensions","$75a982ec3eeb4fe8$var$options","opts","$75a982ec3eeb4fe8$var$filesGroup","ignore","includes","itemsToIgnore","split","map","item","forEach","key","fileGroup","only","extension","extensionKey","custom","params","replace","groupName","$75a982ec3eeb4fe8$var$moveFile","file","onMoveCallback","category","find","$75a982ec3eeb4fe8$var$getExtensionCategory","$jh9ce$fs","existsSync","mkdir","$75a982ec3eeb4fe8$var$createDirByFileExtension","$jh9ce$fsextra","moveSync","movedFiles","readdir","files","index","$75a982ec3eeb4fe8$var$organizeFiles"],"version":3,"file":"index.js.map","sourceRoot":"../"}